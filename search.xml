<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>pymysql增删改查</title>
    <url>/2020/04/19/pymysql/</url>
    <content><![CDATA[<h3 id="mysql想必大家都比较收悉吧，那么怎么在python中对MySQL进行增删改查呢？就让我和大家一起来学习吧！"><a href="#mysql想必大家都比较收悉吧，那么怎么在python中对MySQL进行增删改查呢？就让我和大家一起来学习吧！" class="headerlink" title="mysql想必大家都比较收悉吧，那么怎么在python中对MySQL进行增删改查呢？就让我和大家一起来学习吧！"></a>mysql想必大家都比较收悉吧，那么怎么在python中对MySQL进行增删改查呢？就让我和大家一起来学习吧！</h3><a id="more"></a>
<h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><p>[这个链接里面写的很详细]<a href="https://blog.csdn.net/chic_data/article/details/72286329" target="_blank" rel="noopener">https://blog.csdn.net/chic_data/article/details/72286329</a></p>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'123456'</span>,port=3306) <span class="comment">#利用connect方法声明一个mysql对象，需要输入mysql的ip（由于我们只是本地运行，所以输入localhost就行，然后传入用户名，密码，以及端口号）</span></span><br><span class="line">cursor = db.cursor()<span class="comment">#调用cursor来获取MySQL的操作游标</span></span><br><span class="line">cursor.execute(<span class="string">'SELECT VERSION()'</span>)<span class="comment"># 调用execute方法执行一个MySQL语句</span></span><br><span class="line">data = cursor.fetchone()<span class="comment">#调用fetchone方法获取第一条数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Database version:'</span>, data)</span><br><span class="line">cursor.execute(<span class="string">"create database spiders default character set utf8"</span>) <span class="comment">#创建数据库名为spiders</span></span><br><span class="line">db.close() <span class="comment">#关闭</span></span><br></pre></td></tr></table></figure>
<p><img src="http://q8t39uelu.bkt.clouddn.com/a1.png" alt></p>
<hr>
<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'123456'</span>,port=3306,db = <span class="string">'spiders'</span>) <span class="comment">#相比于创建库，创建表多了数据库名</span></span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'create table if not exists student(id varchar(225) not null,name varchar(225) not null,age int not null,primary key (id))'</span><span class="comment">#创建学生表id，name，age，id为主键</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>
<p><img src="http://q8t39uelu.bkt.clouddn.com/a2.png" alt></p>
<hr>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><h3 id="方法Ⅰ"><a href="#方法Ⅰ" class="headerlink" title="方法Ⅰ"></a>方法Ⅰ</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"><span class="comment">#需要传入表的数据</span></span><br><span class="line">id = <span class="string">'10000001'</span></span><br><span class="line">user = <span class="string">'Bob'</span></span><br><span class="line">age = 20</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'123456'</span>,port=3306,db = <span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'INSERT INTO student(id,name,age)  values(%s, %s, %s)'</span>  <span class="comment">#这里values传入值得类型所以%s就行了</span></span><br><span class="line">try:</span><br><span class="line">    cursor.execute(sql,(id,user,age))<span class="comment">#执行sql语句</span></span><br><span class="line">    db.commit()<span class="comment">#这句commit才是真正更新数据库数据的方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"成功"</span>)</span><br><span class="line">except:</span><br><span class="line">    db.rollback()<span class="comment">#如果执行失败，rollback会执行数据回滚（相当于什么都没有发生过）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"失败"</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5e9c22b9c2a9a83be5110057.jpg" alt></p>
<h3 id="方法Ⅱ（用了方法Ⅰ就会发现，这个方法比较死板，如果添加一个字段就不能用了，接下来看看用字典来实现（即使以后添加新的字段也一样））"><a href="#方法Ⅱ（用了方法Ⅰ就会发现，这个方法比较死板，如果添加一个字段就不能用了，接下来看看用字典来实现（即使以后添加新的字段也一样））" class="headerlink" title="方法Ⅱ（用了方法Ⅰ就会发现，这个方法比较死板，如果添加一个字段就不能用了，接下来看看用字典来实现（即使以后添加新的字段也一样））"></a>方法Ⅱ（用了方法Ⅰ就会发现，这个方法比较死板，如果添加一个字段就不能用了，接下来看看用字典来实现（即使以后添加新的字段也一样））</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'123456'</span>,port=3306,db = <span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"><span class="comment">#字典型数据</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span> : <span class="string">'10000002'</span>,</span><br><span class="line">    <span class="string">'name'</span> : <span class="string">'Maiy'</span>,</span><br><span class="line">    <span class="string">'age'</span> : 18</span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">'student'</span><span class="comment">#表名</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys()) <span class="comment">#用join将data的key用','连接</span></span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>] * len(data))<span class="comment">#字段有多长则有多少个%s</span></span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;)'</span>.format(table=table, keys=keys, values=values) <span class="comment">#sql语句</span></span><br><span class="line">try:</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(sql,tuple(data.values())): <span class="comment">#执行sql语句</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"成功"</span>)</span><br><span class="line">        db.commit()</span><br><span class="line">except:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"失败"</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5e9c28fbc2a9a83be51817e1.jpg" alt></p>
<hr>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'123456'</span>,port=3306,db = <span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"><span class="comment">#字典型数据</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span> : <span class="string">'10000002'</span>,</span><br><span class="line">    <span class="string">'name'</span> : <span class="string">'Maiy'</span>,</span><br><span class="line">    <span class="string">'age'</span> : 20</span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">'student'</span><span class="comment">#表名</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys()) <span class="comment">#用join将data的key用','连接</span></span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>] * len(data))<span class="comment">#字段有多长则有多少个%s</span></span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;) ON DUPLICATE KEY UPDATE'</span>.format(table=table, keys=keys, values=values) <span class="comment">#sql语句</span></span><br><span class="line">update = <span class="string">','</span>.join([<span class="string">" &#123;key&#125; = %s"</span>.format(key=key) <span class="keyword">for</span> key <span class="keyword">in</span> data])</span><br><span class="line">sql += update</span><br><span class="line">try:</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(sql,tuple(data.values())*2): <span class="comment">#执行sql语句(tuple变成一个不可变的list)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"成功"</span>)</span><br><span class="line">        db.commit()</span><br><span class="line">except:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"失败"</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5e9c2b93c2a9a83be51afa6e.jpg" alt></p>
<hr>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'123456'</span>,port=3306,db = <span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">table = <span class="string">'student'</span></span><br><span class="line">condition = <span class="string">'age&gt;22'</span><span class="comment">#删除数据的条件</span></span><br><span class="line">sql = <span class="string">'DELETE FROM &#123;table&#125; WHERE &#123;condition&#125;'</span>.format(table=table,condition=condition)<span class="comment">#sql语句</span></span><br><span class="line">try:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    db.commit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"成功"</span>)</span><br><span class="line">except:</span><br><span class="line">    db.rollback()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"失败"</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5e9c2e8cc2a9a83be51e8036.jpg" alt></p>
<hr>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'123456'</span>,port=3306,db = <span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'SELECT * FROM student WHERE age &gt;=20'</span> <span class="comment">#查询语句</span></span><br><span class="line">try:</span><br><span class="line">    cursor.execute(sql) <span class="comment">#执行语句</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Count:'</span>,cursor.rowcount)<span class="comment">#rowcount方法返回查询到的信息的条数</span></span><br><span class="line">    one = cursor.fetchone()<span class="comment">#返回查询到的第一条数据</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'One:'</span>,one)</span><br><span class="line">    results = cursor.fetchall()<span class="comment">#返回查询到的全部数据，（注意：因为cursor是获得mysql的操作游标，所以如果查询到了3条数据，前面已经查看了第一条，所以现在fetcall查询到的是后面2条数据）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Results:'</span>,results)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Resuts Type:'</span>,<span class="built_in">type</span>(results))<span class="comment">#返回results的数据类型</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">        <span class="built_in">print</span>(row)</span><br><span class="line">except:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"失败"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5e9c474ac2a9a83be542c4c8.jpg" alt><br><img src="https://pic.downk.cc/item/5e9c472bc2a9a83be542930f.jpg" alt></p>
]]></content>
  </entry>
  <entry>
    <title>docker安装</title>
    <url>/2020/04/16/docker%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h1><a id="more"></a>
<h2 id="更新apt索引包"><a href="#更新apt索引包" class="headerlink" title="更新apt索引包"></a>更新apt索引包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<h2 id="安装-apt-依赖包，用于通过HTTPS来获取仓库"><a href="#安装-apt-依赖包，用于通过HTTPS来获取仓库" class="headerlink" title="安装 apt 依赖包，用于通过HTTPS来获取仓库"></a>安装 apt 依赖包，用于通过HTTPS来获取仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure>
<h2 id="添加Docker的官方GPG密钥"><a href="#添加Docker的官方GPG密钥" class="headerlink" title="添加Docker的官方GPG密钥"></a>添加Docker的官方GPG密钥</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add</span><br><span class="line">9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</span><br></pre></td></tr></table></figure>
<h2 id="通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥"><a href="#通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥" class="headerlink" title="通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥"></a>通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">   </span><br><span class="line">pub   rsa4096 2017-02-22 [SCEA]</span><br><span class="line">      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</span><br><span class="line">uid           [ unknown] Docker Release (CE deb) &lt;docker@docker.com&gt;</span><br><span class="line">sub   rsa4096 2017-02-22 [S]</span><br></pre></td></tr></table></figure>
<h2 id="使用以下指令设置稳定版仓库"><a href="#使用以下指令设置稳定版仓库" class="headerlink" title="使用以下指令设置稳定版仓库"></a>使用以下指令设置稳定版仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">  stable"</span></span><br></pre></td></tr></table></figure>
<h2 id="更新apt包索引"><a href="#更新apt包索引" class="headerlink" title="更新apt包索引"></a>更新apt包索引</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
<h2 id="测试docker"><a href="#测试docker" class="headerlink" title="测试docker"></a>测试docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>
<h2 id="出现以下则为成功"><a href="#出现以下则为成功" class="headerlink" title="出现以下则为成功"></a>出现以下则为成功</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
