<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Selenium爬取淘宝商品</title>
    <url>/2020/04/28/Selenium%E7%88%AC%E5%8F%96%E6%B7%98%E5%AE%9D%E5%95%86%E5%93%81/</url>
    <content><![CDATA[<h1 id="介绍了selenium，现在我们用seleium来爬取淘宝上的商品"><a href="#介绍了selenium，现在我们用seleium来爬取淘宝上的商品" class="headerlink" title="介绍了selenium，现在我们用seleium来爬取淘宝上的商品"></a>介绍了selenium，现在我们用seleium来爬取淘宝上的商品</h1><a id="more"></a>
<h2 id="没多的说的，直接上代码"><a href="#没多的说的，直接上代码" class="headerlink" title="没多的说的，直接上代码"></a>没多的说的，直接上代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">from selenium.webdriver.common.keys import Keys</span><br><span class="line">from selenium.webdriver.support import expected_conditions as EC</span><br><span class="line">from selenium.webdriver.support.wait import WebDriverWait</span><br><span class="line">from pyquery import PyQuery as pq</span><br><span class="line">from urllib.parse import quote</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="built_in">wait</span> = WebDriverWait(browser,10)</span><br><span class="line">url = <span class="string">'https://re.taobao.com/search?keyword='</span></span><br><span class="line">keyword = <span class="string">"连衣裙"</span></span><br><span class="line">def index_page(page):</span><br><span class="line">   Url = url+keyword</span><br><span class="line">   browser.get(Url)</span><br><span class="line">   <span class="keyword">if</span> page == 1:</span><br><span class="line">      browser.execute_script(<span class="string">'window.scrollTo(0,document.body.scrollHeight)'</span>) <span class="comment">#到页面底部</span></span><br><span class="line">      get_products(page)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,<span class="string">"#Jumper"</span>)))<span class="comment">#获取跳转页面的输入框</span></span><br><span class="line">      input.clear() <span class="comment">#清除框上面的东西</span></span><br><span class="line">      input.send_keys(page)<span class="comment">#输入页码</span></span><br><span class="line">      submit = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,<span class="string">'.pageConfirm'</span>))) <span class="comment">#获取确定框</span></span><br><span class="line">      submit.click() <span class="comment">#点击确定框</span></span><br><span class="line">      browser.execute_script(<span class="string">'window.scrollTo(0,document.body.scrollHeight)'</span>)</span><br><span class="line">      get_products(page)</span><br><span class="line"></span><br><span class="line">def get_products(page):</span><br><span class="line">   html = browser.page_source <span class="comment">#获取当前网页源代码</span></span><br><span class="line">   doc = pq(html)</span><br><span class="line">   items = doc(<span class="string">'#J_waterfallWrapper .item'</span>).items()</span><br><span class="line">   <span class="built_in">print</span>(items)</span><br><span class="line">   <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">      prodec = &#123;</span><br><span class="line">         <span class="string">'price'</span> : item.find(<span class="string">'.price strong'</span>).text(),</span><br><span class="line">         <span class="string">'title'</span> : item.find(<span class="string">'.title'</span>).text(),</span><br><span class="line">         <span class="string">'payNum'</span>:item.find(<span class="string">'payNum'</span>).text(),</span><br><span class="line">         <span class="string">'shopNick'</span> : item.find(<span class="string">'shopNick'</span>).text(),</span><br><span class="line">         <span class="string">'dsr-info-num'</span>:item.find(<span class="string">'dsr-info-num'</span>).text()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">print</span>(prodec)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"=====  第"</span>+str(page)+<span class="string">"页爬取成功 ======"</span>)</span><br><span class="line">   with open(<span class="string">'淘宝商品.txt'</span>,<span class="string">'a+'</span>,encoding=<span class="string">'utf-8'</span>) as file:</span><br><span class="line">      file.write(<span class="string">''</span>.join(str(prodec)))</span><br><span class="line">      file.write(<span class="string">'\n'</span>)</span><br><span class="line">Max_ = 100</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(1,Max_+1):</span><br><span class="line">       index_page(i)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>docker上安装hadoop集群</title>
    <url>/2020/04/24/docker%E4%B8%8A%E5%AE%89%E8%A3%85hadoop%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h1 id="在docker上安装hadoop集群-基于docker安装之上"><a href="#在docker上安装hadoop集群-基于docker安装之上" class="headerlink" title="在docker上安装hadoop集群(基于docker安装之上)"></a>在docker上安装hadoop集群(基于docker安装之上)</h1><a id="more"></a>
<h2 id="进入root用户-如果没有进入root用户要在命令前加sudo"><a href="#进入root用户-如果没有进入root用户要在命令前加sudo" class="headerlink" title="进入root用户(如果没有进入root用户要在命令前加sudo)"></a>进入root用户(如果没有进入root用户要在命令前加sudo)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="从docker-hub上拉去一个Ubuntu镜像（这个过程可能有点慢，请耐心等待）"><a href="#从docker-hub上拉去一个Ubuntu镜像（这个过程可能有点慢，请耐心等待）" class="headerlink" title="从docker hub上拉去一个Ubuntu镜像（这个过程可能有点慢，请耐心等待）"></a>从docker hub上拉去一个Ubuntu镜像（这个过程可能有点慢，请耐心等待）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="完成ubuntu的镜像拉去之后开始检验查看知否安装成功"><a href="#完成ubuntu的镜像拉去之后开始检验查看知否安装成功" class="headerlink" title="完成ubuntu的镜像拉去之后开始检验查看知否安装成功"></a>完成ubuntu的镜像拉去之后开始检验查看知否安装成功</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5ea2a29bc2a9a83be5686a87.png" alt></p>
<hr>
<h2 id="在dicker上运行ubuntu"><a href="#在dicker上运行ubuntu" class="headerlink" title="在dicker上运行ubuntu"></a>在dicker上运行ubuntu</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -v ~/docker-ubuntu:/root/docker-ubuntu --name ubuntu ubuntu</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="更新资源（在docker上的ubuntu默认是root用户）"><a href="#更新资源（在docker上的ubuntu默认是root用户）" class="headerlink" title="更新资源（在docker上的ubuntu默认是root用户）"></a>更新资源（在docker上的ubuntu默认是root用户）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="安装vim编辑器（个人觉得gedit更好用，但是不知道怎么的docker用不了gedit）"><a href="#安装vim编辑器（个人觉得gedit更好用，但是不知道怎么的docker用不了gedit）" class="headerlink" title="安装vim编辑器（个人觉得gedit更好用，但是不知道怎么的docker用不了gedit）"></a>安装vim编辑器（个人觉得gedit更好用，但是不知道怎么的docker用不了gedit）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install vim</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install ssh</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="设置ssh免密码登陆"><a href="#设置ssh免密码登陆" class="headerlink" title="设置ssh免密码登陆"></a>设置ssh免密码登陆</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa   <span class="comment">#一直点回车</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/.ssh</span><br><span class="line"></span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="设置ssh自动启动"><a href="#设置ssh自动启动" class="headerlink" title="设置ssh自动启动"></a>设置ssh自动启动</h2><h3 id="进入bashrc"><a href="#进入bashrc" class="headerlink" title="进入bashrc"></a>进入bashrc</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>
<h3 id="在文件中加上启动命令"><a href="#在文件中加上启动命令" class="headerlink" title="在文件中加上启动命令"></a>在文件中加上启动命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ssh start</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5ea2a6f3c2a9a83be56e62fa.jpg" alt></p>
<h3 id="使用source命令，使之生效"><a href="#使用source命令，使之生效" class="headerlink" title="使用source命令，使之生效"></a>使用source命令，使之生效</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt  install openjdk-8-jdk</span><br></pre></td></tr></table></figure>
<h3 id="加入JAVA环境变量"><a href="#加入JAVA环境变量" class="headerlink" title="加入JAVA环境变量"></a>加入JAVA环境变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#加入下面两个语句</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5ea2a8b8c2a9a83be5709822.jpg" alt></p>
<h3 id="使用source命令"><a href="#使用source命令" class="headerlink" title="使用source命令"></a>使用source命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="保存镜像（打开新的终端）"><a href="#保存镜像（打开新的终端）" class="headerlink" title="保存镜像（打开新的终端）"></a>保存镜像（打开新的终端）</h2><h3 id="查看所以容器"><a href="#查看所以容器" class="headerlink" title="查看所以容器"></a>查看所以容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker ps -a</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5ea2a9f9c2a9a83be57218f4.jpg" alt></p>
<h3 id="保存容器"><a href="#保存容器" class="headerlink" title="保存容器"></a>保存容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker commit id[你自己的容器id] ubuntu/jdkinstalled</span><br></pre></td></tr></table></figure>
<h2 id="开启3个容器的镜像"><a href="#开启3个容器的镜像" class="headerlink" title="开启3个容器的镜像"></a>开启3个容器的镜像</h2><h3 id="分别打开3个终端，每个终端分别输入不同的命令"><a href="#分别打开3个终端，每个终端分别输入不同的命令" class="headerlink" title="分别打开3个终端，每个终端分别输入不同的命令"></a>分别打开3个终端，每个终端分别输入不同的命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -it -h master --name master ubuntu/hadoopinstalled</span><br><span class="line">sudo docker run -it -h slave01 --name slave01 ubuntu/hadoopinstalled</span><br><span class="line">sudo docker run -it -h slave02 --name slave02 ubuntu/hadoopinstalled</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="设置ip"><a href="#设置ip" class="headerlink" title="设置ip"></a>设置ip</h2><h3 id="查看ip"><a href="#查看ip" class="headerlink" title="查看ip"></a>查看ip</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/hosts</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5ea2add4c2a9a83be5772f3b.jpg" alt></p>
<h3 id="分别将其他的容器ip加入自己的hosts里面"><a href="#分别将其他的容器ip加入自己的hosts里面" class="headerlink" title="分别将其他的容器ip加入自己的hosts里面"></a>分别将其他的容器ip加入自己的hosts里面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5ea2aeb3c2a9a83be57856b1.jpg" alt></p>
<h3 id="检查是否成功（在master里面是否能进入slave01，slave02）"><a href="#检查是否成功（在master里面是否能进入slave01，slave02）" class="headerlink" title="检查是否成功（在master里面是否能进入slave01，slave02）"></a>检查是否成功（在master里面是否能进入slave01，slave02）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh slave01</span><br><span class="line">docker run -itd --name master --hostname master --net network_my --ip 192.168.10.30 --add-host slave01:192.168.10.31 --add-host slave02:192.168.10.32  -d -P -p 50070:50070 -p 8088:8088 hadoop:master</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5ea2af9ac2a9a83be5797bbc.jpg" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh slave02</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5ea2afd2c2a9a83be579c055.jpg" alt></p>
<hr>
<h2 id="下载hadoop-打开新的终端"><a href="#下载hadoop-打开新的终端" class="headerlink" title="下载hadoop(打开新的终端)"></a>下载hadoop(打开新的终端)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker [hadoop的本地路径] [容器id]://usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf /usr/<span class="built_in">local</span>/hadoop-2.9.2 -C /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="修改hadoop的环境变量"><a href="#修改hadoop的环境变量" class="headerlink" title="修改hadoop的环境变量"></a>修改hadoop的环境变量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment">#加入下面代码</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/hadoop-2.9.2/sbin:/usr/<span class="built_in">local</span>/hadoop-2.9.2/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5ea2bf44c2a9a83be58ca3cb.jpg" alt></p>
<hr>
<h2 id="配置hadoop集群"><a href="#配置hadoop集群" class="headerlink" title="配置hadoop集群"></a>配置hadoop集群</h2><h3 id="修改hadoop-enc-sh的java路径"><a href="#修改hadoop-enc-sh的java路径" class="headerlink" title="修改hadoop-enc.sh的java路径"></a>修改hadoop-enc.sh的java路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/</span><br></pre></td></tr></table></figure>
<h3 id="修改core-site-xml"><a href="#修改core-site-xml" class="headerlink" title="修改core-site.xml"></a>修改core-site.xml</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">      &lt;property&gt;</span><br><span class="line">          &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;file:/usr/<span class="built_in">local</span>/hadoop-2.9.2/tmp&lt;/value&gt;</span><br><span class="line">          &lt;description&gt;Abase <span class="keyword">for</span> other temporary directories.&lt;/description&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">      &lt;property&gt;</span><br><span class="line">          &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;hdfs://master:9000&lt;/value&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
<h3 id="修改hdfs-site-xml"><a href="#修改hdfs-site-xml" class="headerlink" title="修改hdfs-site.xml"></a>修改hdfs-site.xml</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;file:/usr/<span class="built_in">local</span>/hadoop-2.9.2/namenode_dir&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;file:/usr/<span class="built_in">local</span>/hadoop-2.9.2/datanode_dir&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
<h3 id="修改mapred-site-xml-template"><a href="#修改mapred-site-xml-template" class="headerlink" title="修改mapred-site.xml.template"></a>修改mapred-site.xml.template</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp etc/hadoop/mapred-site.xml.template etc/hadoop/mapred-site.xml</span><br><span class="line">vim etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
<h3 id="修改yarn-site-xml"><a href="#修改yarn-site-xml" class="headerlink" title="修改yarn-site.xml"></a>修改yarn-site.xml</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">      &lt;property&gt;</span><br><span class="line">          &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">      &lt;property&gt;</span><br><span class="line">          &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;master&lt;/value&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">&lt;/configuration</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="使用scp一键分发给slave01，slave02"><a href="#使用scp一键分发给slave01，slave02" class="headerlink" title="使用scp一键分发给slave01，slave02"></a>使用scp一键分发给slave01，slave02</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/hadoop-2.9.2</span><br><span class="line">scp -r hadoop-2.9.2 slave01:/usr/<span class="built_in">local</span>/</span><br><span class="line">scp -r hadoop-2.9.2 slave02:/usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="修改slave01-slave02的hadoop的环境变量"><a href="#修改slave01-slave02的hadoop的环境变量" class="headerlink" title="修改slave01,slave02的hadoop的环境变量"></a>修改slave01,slave02的hadoop的环境变量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment">#加入下面代码</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/hadoop-2.9.2/sbin:/usr/<span class="built_in">local</span>/hadoop-2.9.2/bin</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<h2 id="格式化hadoop（在master下面）"><a href="#格式化hadoop（在master下面）" class="headerlink" title="格式化hadoop（在master下面）"></a>格式化hadoop（在master下面）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/hadoop-2.9.2</span><br><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure>
<h2 id="启动hadoop"><a href="#启动hadoop" class="headerlink" title="启动hadoop"></a>启动hadoop</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5ea2c4d5c2a9a83be593bbdb.jpg" alt><br><img src="https://pic.downk.cc/item/5ea2c512c2a9a83be5941501.jpg" alt></p>
]]></content>
  </entry>
  <entry>
    <title>docker安装</title>
    <url>/2020/04/16/docker%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h1><a id="more"></a>
<h2 id="更新apt索引包"><a href="#更新apt索引包" class="headerlink" title="更新apt索引包"></a>更新apt索引包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<h2 id="安装-apt-依赖包，用于通过HTTPS来获取仓库"><a href="#安装-apt-依赖包，用于通过HTTPS来获取仓库" class="headerlink" title="安装 apt 依赖包，用于通过HTTPS来获取仓库"></a>安装 apt 依赖包，用于通过HTTPS来获取仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure>
<h2 id="添加Docker的官方GPG密钥"><a href="#添加Docker的官方GPG密钥" class="headerlink" title="添加Docker的官方GPG密钥"></a>添加Docker的官方GPG密钥</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<h2 id="通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥"><a href="#通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥" class="headerlink" title="通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥"></a>通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure>
<h2 id="使用以下指令设置稳定版仓库"><a href="#使用以下指令设置稳定版仓库" class="headerlink" title="使用以下指令设置稳定版仓库"></a>使用以下指令设置稳定版仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">  stable"</span></span><br></pre></td></tr></table></figure>
<h2 id="更新apt包索引"><a href="#更新apt包索引" class="headerlink" title="更新apt包索引"></a>更新apt包索引</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
<h2 id="测试docker"><a href="#测试docker" class="headerlink" title="测试docker"></a>测试docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>
<h2 id="出现以下则为成功"><a href="#出现以下则为成功" class="headerlink" title="出现以下则为成功"></a>出现以下则为成功</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>pymysql增删改查</title>
    <url>/2020/04/19/pymysql/</url>
    <content><![CDATA[<h3 id="mysql想必大家都比较收悉吧，那么怎么在python中对MySQL进行增删改查呢？就让我和大家一起来学习吧！"><a href="#mysql想必大家都比较收悉吧，那么怎么在python中对MySQL进行增删改查呢？就让我和大家一起来学习吧！" class="headerlink" title="mysql想必大家都比较收悉吧，那么怎么在python中对MySQL进行增删改查呢？就让我和大家一起来学习吧！"></a>mysql想必大家都比较收悉吧，那么怎么在python中对MySQL进行增删改查呢？就让我和大家一起来学习吧！</h3><a id="more"></a>
<h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><p>[这个链接里面写的很详细]<a href="https://blog.csdn.net/chic_data/article/details/72286329" target="_blank" rel="noopener">https://blog.csdn.net/chic_data/article/details/72286329</a></p>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'123456'</span>,port=3306) <span class="comment">#利用connect方法声明一个mysql对象，需要输入mysql的ip（由于我们只是本地运行，所以输入localhost就行，然后传入用户名，密码，以及端口号）</span></span><br><span class="line">cursor = db.cursor()<span class="comment">#调用cursor来获取MySQL的操作游标</span></span><br><span class="line">cursor.execute(<span class="string">'SELECT VERSION()'</span>)<span class="comment"># 调用execute方法执行一个MySQL语句</span></span><br><span class="line">data = cursor.fetchone()<span class="comment">#调用fetchone方法获取第一条数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Database version:'</span>, data)</span><br><span class="line">cursor.execute(<span class="string">"create database spiders default character set utf8"</span>) <span class="comment">#创建数据库名为spiders</span></span><br><span class="line">db.close() <span class="comment">#关闭</span></span><br></pre></td></tr></table></figure>
<p><img src="http://q8t39uelu.bkt.clouddn.com/a1.png" alt></p>
<hr>
<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'123456'</span>,port=3306,db = <span class="string">'spiders'</span>) <span class="comment">#相比于创建库，创建表多了数据库名</span></span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'create table if not exists student(id varchar(225) not null,name varchar(225) not null,age int not null,primary key (id))'</span><span class="comment">#创建学生表id，name，age，id为主键</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>
<p><img src="http://q8t39uelu.bkt.clouddn.com/a2.png" alt></p>
<hr>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><h3 id="方法Ⅰ"><a href="#方法Ⅰ" class="headerlink" title="方法Ⅰ"></a>方法Ⅰ</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"><span class="comment">#需要传入表的数据</span></span><br><span class="line">id = <span class="string">'10000001'</span></span><br><span class="line">user = <span class="string">'Bob'</span></span><br><span class="line">age = 20</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'123456'</span>,port=3306,db = <span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'INSERT INTO student(id,name,age)  values(%s, %s, %s)'</span>  <span class="comment">#这里values传入值得类型所以%s就行了</span></span><br><span class="line">try:</span><br><span class="line">    cursor.execute(sql,(id,user,age))<span class="comment">#执行sql语句</span></span><br><span class="line">    db.commit()<span class="comment">#这句commit才是真正更新数据库数据的方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"成功"</span>)</span><br><span class="line">except:</span><br><span class="line">    db.rollback()<span class="comment">#如果执行失败，rollback会执行数据回滚（相当于什么都没有发生过）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"失败"</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5e9c22b9c2a9a83be5110057.jpg" alt></p>
<h3 id="方法Ⅱ（用了方法Ⅰ就会发现，这个方法比较死板，如果添加一个字段就不能用了，接下来看看用字典来实现（即使以后添加新的字段也一样））"><a href="#方法Ⅱ（用了方法Ⅰ就会发现，这个方法比较死板，如果添加一个字段就不能用了，接下来看看用字典来实现（即使以后添加新的字段也一样））" class="headerlink" title="方法Ⅱ（用了方法Ⅰ就会发现，这个方法比较死板，如果添加一个字段就不能用了，接下来看看用字典来实现（即使以后添加新的字段也一样））"></a>方法Ⅱ（用了方法Ⅰ就会发现，这个方法比较死板，如果添加一个字段就不能用了，接下来看看用字典来实现（即使以后添加新的字段也一样））</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'123456'</span>,port=3306,db = <span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"><span class="comment">#字典型数据</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span> : <span class="string">'10000002'</span>,</span><br><span class="line">    <span class="string">'name'</span> : <span class="string">'Maiy'</span>,</span><br><span class="line">    <span class="string">'age'</span> : 18</span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">'student'</span><span class="comment">#表名</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys()) <span class="comment">#用join将data的key用','连接</span></span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>] * len(data))<span class="comment">#字段有多长则有多少个%s</span></span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;)'</span>.format(table=table, keys=keys, values=values) <span class="comment">#sql语句</span></span><br><span class="line">try:</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(sql,tuple(data.values())): <span class="comment">#执行sql语句</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"成功"</span>)</span><br><span class="line">        db.commit()</span><br><span class="line">except:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"失败"</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5e9c28fbc2a9a83be51817e1.jpg" alt></p>
<hr>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'123456'</span>,port=3306,db = <span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"><span class="comment">#字典型数据</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span> : <span class="string">'10000002'</span>,</span><br><span class="line">    <span class="string">'name'</span> : <span class="string">'Maiy'</span>,</span><br><span class="line">    <span class="string">'age'</span> : 20</span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">'student'</span><span class="comment">#表名</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys()) <span class="comment">#用join将data的key用','连接</span></span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>] * len(data))<span class="comment">#字段有多长则有多少个%s</span></span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;) ON DUPLICATE KEY UPDATE'</span>.format(table=table, keys=keys, values=values) <span class="comment">#sql语句</span></span><br><span class="line">update = <span class="string">','</span>.join([<span class="string">" &#123;key&#125; = %s"</span>.format(key=key) <span class="keyword">for</span> key <span class="keyword">in</span> data])</span><br><span class="line">sql += update</span><br><span class="line">try:</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(sql,tuple(data.values())*2): <span class="comment">#执行sql语句(tuple变成一个不可变的list)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"成功"</span>)</span><br><span class="line">        db.commit()</span><br><span class="line">except:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"失败"</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5e9c2b93c2a9a83be51afa6e.jpg" alt></p>
<hr>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'123456'</span>,port=3306,db = <span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">table = <span class="string">'student'</span></span><br><span class="line">condition = <span class="string">'age&gt;22'</span><span class="comment">#删除数据的条件</span></span><br><span class="line">sql = <span class="string">'DELETE FROM &#123;table&#125; WHERE &#123;condition&#125;'</span>.format(table=table,condition=condition)<span class="comment">#sql语句</span></span><br><span class="line">try:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    db.commit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"成功"</span>)</span><br><span class="line">except:</span><br><span class="line">    db.rollback()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"失败"</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5e9c2e8cc2a9a83be51e8036.jpg" alt></p>
<hr>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'123456'</span>,port=3306,db = <span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'SELECT * FROM student WHERE age &gt;=20'</span> <span class="comment">#查询语句</span></span><br><span class="line">try:</span><br><span class="line">    cursor.execute(sql) <span class="comment">#执行语句</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Count:'</span>,cursor.rowcount)<span class="comment">#rowcount方法返回查询到的信息的条数</span></span><br><span class="line">    one = cursor.fetchone()<span class="comment">#返回查询到的第一条数据</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'One:'</span>,one)</span><br><span class="line">    results = cursor.fetchall()<span class="comment">#返回查询到的全部数据，（注意：因为cursor是获得mysql的操作游标，所以如果查询到了3条数据，前面已经查看了第一条，所以现在fetcall查询到的是后面2条数据）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Results:'</span>,results)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Resuts Type:'</span>,<span class="built_in">type</span>(results))<span class="comment">#返回results的数据类型</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">        <span class="built_in">print</span>(row)</span><br><span class="line">except:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"失败"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.downk.cc/item/5e9c474ac2a9a83be542c4c8.jpg" alt><br><img src="https://pic.downk.cc/item/5e9c472bc2a9a83be542930f.jpg" alt></p>
]]></content>
  </entry>
  <entry>
    <title>selenium的使用</title>
    <url>/2020/04/27/selenium%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h1><p>Selenium [1]  是一个用于Web应用程序测试的工具。</p>
<a id="more"></a>Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。

<hr>
<h2 id="使用方法代码如下"><a href="#使用方法代码如下" class="headerlink" title="使用方法代码如下"></a>使用方法代码如下</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">from selenium.webdriver.common.keys import Keys</span><br><span class="line">from selenium.webdriver.support import expected_conditions as EC</span><br><span class="line">from selenium.webdriver.support.wait import WebDriverWait</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome() <span class="comment">#声明一个webdriver对象</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment">#     browser.get('https://www.baidu.com')  #get请求</span></span><br><span class="line"><span class="comment">#     input =browser.find_element_by_id('kw') #找到id为kw的元件</span></span><br><span class="line"><span class="comment">#     input.send_keys('Python') #搜索框中输入python</span></span><br><span class="line"><span class="comment">#     input.send_keys(Keys.ENTER)  #执行搜索</span></span><br><span class="line"><span class="comment">#     wait = WebDriverWait(browser,10) #等待10s</span></span><br><span class="line"><span class="comment">#     wait.until(EC.presence_of_element_located((By.ID,'content_left')))</span></span><br><span class="line"><span class="comment">#     print(browser.current_url)</span></span><br><span class="line"><span class="comment">#     print(browser.get_cookies())</span></span><br><span class="line"><span class="comment">#     print(browser.page_source)</span></span><br><span class="line"><span class="comment"># finally:</span></span><br><span class="line"><span class="comment">#     browser.close() #关闭谷歌</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#单节点</span></span><br><span class="line"><span class="comment"># browser.get('https://www.taobao.com')</span></span><br><span class="line"><span class="comment"># input_first = browser.find_element_by_id('q') #根据id获取输入框</span></span><br><span class="line"><span class="comment"># input_second = browser.find_element_by_css_selector('#q')  #根据css获取输入框</span></span><br><span class="line"><span class="comment"># input_third = browser.find_element_by_xpath('//*[@id="q"]')  #根据xpath获取输入框</span></span><br><span class="line"><span class="comment"># print(input_first,input_second,input_third)</span></span><br><span class="line"><span class="comment"># print(browser.page_source)</span></span><br><span class="line"><span class="comment"># browser.close()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多节点</span></span><br><span class="line"><span class="comment"># browser.get('https://www.taobao.com')</span></span><br><span class="line"><span class="comment"># lis = browser.find_elements_by_css_selector('.service-bd li') #获取多节点elements</span></span><br><span class="line"><span class="comment"># print(lis)</span></span><br><span class="line"><span class="comment"># browser.close()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#节点交互</span></span><br><span class="line"><span class="comment"># import time</span></span><br><span class="line"><span class="comment"># browser = webdriver.Chrome()</span></span><br><span class="line"><span class="comment"># browser.get("https://www.taobao.com")</span></span><br><span class="line"><span class="comment"># input = browser.find_element(By.ID,'q') #找到输入框</span></span><br><span class="line"><span class="comment"># input.send_keys('iphone')#写入</span></span><br><span class="line"><span class="comment"># time.sleep(1)</span></span><br><span class="line"><span class="comment"># input.clear()#清除</span></span><br><span class="line"><span class="comment"># input.send_keys('ipad')</span></span><br><span class="line"><span class="comment"># button = browser.find_element_by_class_name('btn-search')</span></span><br><span class="line"><span class="comment"># button.click()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#动作链</span></span><br><span class="line"><span class="comment"># from selenium.webdriver import ActionChains</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># url = 'http://wwww.runoob.com/try/try.php?filename=jqeryui-api-droppable'</span></span><br><span class="line"><span class="comment"># browser.get(url)</span></span><br><span class="line"><span class="comment"># browser.switch_to.frame('iframeResult')</span></span><br><span class="line"><span class="comment"># source = browser.find_element_by_css_selector('#draggable')</span></span><br><span class="line"><span class="comment"># target = browser.find_element_by_css_selector('#draggable')</span></span><br><span class="line"><span class="comment"># actions = ActionChains(browser)</span></span><br><span class="line"><span class="comment"># actions.drag_and_drop(source,target)</span></span><br><span class="line"><span class="comment"># actions.perform()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行JavaScript</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># browser.get('https://www.zhihu.com/explore')</span></span><br><span class="line"><span class="comment"># browser.execute_script('window.scrollTo(0,document.body.scrollHeight)') #执行JavaScript，将进度条托到最底部</span></span><br><span class="line"><span class="comment"># browser.execute_script('alert("To Bottom")')  #显示To Bottom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取节点信息</span></span><br><span class="line"><span class="comment"># browser.get('https://www.zhihu.com/explore')</span></span><br><span class="line"><span class="comment"># logo = browser.find_element_by_class_name('Button,ExploreHomePage-specialsLoginButton') #传入节点名</span></span><br><span class="line"><span class="comment"># print(logo)</span></span><br><span class="line"><span class="comment"># print(logo.get_attribute('class'))  #获取节点的class值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取文本值</span></span><br><span class="line"><span class="comment"># browser.get('https://www.zhihu.com/explore')</span></span><br><span class="line"><span class="comment"># input = browser.find_elements_by_class_name('Tabs-link,AppHeader-TabsLink') #传入节点的class的名字（Google网页代码检查）</span></span><br><span class="line"><span class="comment"># for i in range(len(input)):</span></span><br><span class="line"><span class="comment">#     print(input[i].text) #输出文本内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取id，位置，便签名和大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># browser.get('https://www.zhihu.com/explore')</span></span><br><span class="line"><span class="comment"># input = browser.find_element_by_class_name("SearchBar-input, Input-wrapper, Input-wrapper--grey")</span></span><br><span class="line"><span class="comment"># print(input.id) #获取id</span></span><br><span class="line"><span class="comment"># print(input.location) #获取位子</span></span><br><span class="line"><span class="comment"># print(input.tag_name) #获取便签名</span></span><br><span class="line"><span class="comment"># print(input.size) #获取大小</span></span><br><span class="line"><span class="comment"># print(input.text) #获取文本</span></span><br><span class="line"><span class="comment"># input = browser.find_element_by_class_name("Tabs-link,AppHeader-TabsLink")</span></span><br><span class="line"><span class="comment"># print(input.id)</span></span><br><span class="line"><span class="comment"># print(input.location)</span></span><br><span class="line"><span class="comment"># print(input.tag_name)</span></span><br><span class="line"><span class="comment"># print(input.size)</span></span><br><span class="line"><span class="comment"># print(input.text)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#延时等待</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># browser.implicitly_wait(10) #等待10s</span></span><br><span class="line"><span class="comment"># browser.get('https://www.zhihu.com/explore')</span></span><br><span class="line"><span class="comment"># input = browser.find_element_by_class_name('SearchBar-input, Input-wrapper, Input-wrapper--grey')</span></span><br><span class="line"><span class="comment"># print(input)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#显式等待（等待一段时间，如果时间过了未查到，则会报错）</span></span><br><span class="line"><span class="comment"># browser.get('https://www.zhihu.com')</span></span><br><span class="line"><span class="comment"># wait =WebDriverWait(browser,10) #等待10s</span></span><br><span class="line"><span class="comment"># input = wait.until(EC.presence_of_element_located((By.ID,'Popover2-toggle')))</span></span><br><span class="line"><span class="comment"># button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,'.SignFlow')))</span></span><br><span class="line"><span class="comment"># print(input,button)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#前进和后退</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import time</span></span><br><span class="line"><span class="comment">#分别打开3个网页</span></span><br><span class="line"><span class="comment"># browser.get('https://www.baidu.com')</span></span><br><span class="line"><span class="comment"># browser.get('https://www.taobao.com')</span></span><br><span class="line"><span class="comment"># browser.get('https://www.python.org')</span></span><br><span class="line"><span class="comment"># browser.back() #回到第二个</span></span><br><span class="line"><span class="comment"># time.sleep(2)</span></span><br><span class="line"><span class="comment"># browser.forward() #前进到第三个网页</span></span><br><span class="line"><span class="comment"># time.sleep(3)</span></span><br><span class="line"><span class="comment"># browser.close()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Cookies</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># browser.get('https://www.zhihu.com/explore')</span></span><br><span class="line"><span class="comment"># print(browser.get_cookies()) #打印cookies值</span></span><br><span class="line"><span class="comment"># browser.add_cookie(&#123;'name':'name','domain':'www.zhihu.com','value':'germey'&#125;) #添加值</span></span><br><span class="line"><span class="comment"># print(browser.get_cookies())</span></span><br><span class="line"><span class="comment"># browser.delete_all_cookies()</span></span><br><span class="line"><span class="comment"># print(browser.get_cookies())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选项卡管理</span></span><br><span class="line"><span class="comment"># import time</span></span><br><span class="line"><span class="comment"># browser.get('https://www.baidu.com')</span></span><br><span class="line"><span class="comment"># browser.execute_script('window.open()')</span></span><br><span class="line"><span class="comment"># print(browser.window_handles) #打印出所有选项卡</span></span><br><span class="line"><span class="comment"># browser.switch_to_window(browser.window_handles[1]) #选择第2个</span></span><br><span class="line"><span class="comment"># browser.get('https://www.taobao.com')</span></span><br><span class="line"><span class="comment"># time.sleep(1)</span></span><br><span class="line"><span class="comment"># browser.switch_to_window(browser.window_handles[0]) #第1个</span></span><br><span class="line"><span class="comment"># browser.get('https://python.org')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#异常处理</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># from selenium.common.exceptions import TimeoutException,NoSuchElementException</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment">#     browser.get('https://www.baidu.com')</span></span><br><span class="line"><span class="comment"># except TimeoutException: #延时报错</span></span><br><span class="line"><span class="comment">#     print('Time Out')</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment">#     browser.find_element_by_id('Biao-K')</span></span><br><span class="line"><span class="comment"># except NoSuchElementException: #未找到报错</span></span><br><span class="line"><span class="comment">#     print('No Element')</span></span><br><span class="line"><span class="comment"># finally:</span></span><br><span class="line"><span class="comment">#     browser.close()</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>成都二手房数据爬取</title>
    <url>/2020/06/16/%E6%88%90%E9%83%BD%E4%BA%8C%E6%89%8B%E6%88%BF%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/</url>
    <content><![CDATA[<h1 id="爬虫的一个小练习"><a href="#爬虫的一个小练习" class="headerlink" title="爬虫的一个小练习"></a>爬虫的一个小练习</h1><a id="more"></a>
<h2 id="先上一个比较传统的爬虫"><a href="#先上一个比较传统的爬虫" class="headerlink" title="先上一个比较传统的爬虫"></a>先上一个比较传统的爬虫</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from pyquery import PyQuery as pq</span><br><span class="line">import requests</span><br><span class="line">from lxml import etree</span><br><span class="line">import csv</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">MAX = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># url ="https://cd.lianjia.com/ershoufang/pg2/"</span></span><br><span class="line">url = <span class="string">"https://cd.lianjia.com/ershoufang/"</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># response = requests.get(url=url,headers=headers)</span></span><br><span class="line"><span class="comment"># response.status_code</span></span><br><span class="line">def index_page(page):</span><br><span class="line">    try:</span><br><span class="line">        <span class="keyword">if</span> page &gt; 1:</span><br><span class="line">            url_ = url+<span class="string">"pg"</span>+str(page)+<span class="string">"/"</span></span><br><span class="line">            response = requests.get(url=url_,headers=headers)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == 200:</span><br><span class="line">                <span class="built_in">return</span> response.text</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response = requests.get(url=url,headers=headers)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == 200:</span><br><span class="line">                <span class="built_in">return</span> response.text</span><br><span class="line">    except:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"爬取错误"</span>)</span><br><span class="line">def get_products(html):</span><br><span class="line">    html_ = etree.HTML(html)</span><br><span class="line">    items = html_.xpath(<span class="string">'//ul[@class="sellListContent"]/li'</span>)</span><br><span class="line"><span class="comment">#     print(len(items))</span></span><br><span class="line">    docts = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        price = item.xpath(<span class="string">'./div/div/div[@class="totalPrice"]/span/text()'</span>)</span><br><span class="line">        unit_price = item.xpath(<span class="string">'./div/div/div[@class="unitPrice"]/@data-price'</span>)</span><br><span class="line">        title = item.xpath(<span class="string">'./div/div[@class="title"]/a/text()'</span>)</span><br><span class="line">        kk = item.xpath(<span class="string">'./div/div/div[@class="houseInfo"]//text()'</span>)</span><br><span class="line"><span class="comment">#         print(kk)    </span></span><br><span class="line">        room, hall, area, orientation, decoration, floor, setup,structure  = houseInfo(kk)</span><br><span class="line">      </span><br><span class="line">        flag = setup.isdigit()</span><br><span class="line">        <span class="keyword">if</span> flag == False:</span><br><span class="line">            setup = -9999</span><br><span class="line"><span class="comment">#         print(room,hall,area,orientation,decoration,floor,setup,structure)</span></span><br><span class="line"><span class="comment">#         print(type(price))</span></span><br><span class="line">        doct = &#123;</span><br><span class="line">            <span class="string">"名称"</span>:title[0],</span><br><span class="line">            <span class="string">"价格(万元)"</span>:price[0],</span><br><span class="line">            <span class="string">"单价(元)"</span>:unit_price[0],</span><br><span class="line">            <span class="string">"室"</span>:room,</span><br><span class="line">            <span class="string">"厅"</span>:hall,</span><br><span class="line">            <span class="string">"面积(平方米)"</span>:area,</span><br><span class="line">            <span class="string">"方位"</span>:orientation,</span><br><span class="line">            <span class="string">"装修"</span>:decoration,</span><br><span class="line">            <span class="string">"楼层"</span>:floor,</span><br><span class="line">            <span class="string">"建成年"</span>:setup,</span><br><span class="line">            <span class="string">"房屋类型"</span>:structure</span><br><span class="line">        &#125;</span><br><span class="line">        data_csv(doct)</span><br><span class="line"></span><br><span class="line">def houseInfo(Info):</span><br><span class="line">    bb =  Info[0].split(<span class="string">"|"</span>)</span><br><span class="line">    room = bb[0][0]</span><br><span class="line">    hall = bb[0][2]</span><br><span class="line">    area = bb[1][:-3]</span><br><span class="line">    orientation = bb[2]</span><br><span class="line">    decoration = bb[3]</span><br><span class="line">    floor = bb[4]</span><br><span class="line">    setup = bb[5][1:5]</span><br><span class="line">    structure = bb[-1]</span><br><span class="line">    <span class="built_in">return</span> room, hall, area, orientation, decoration, floor ,setup, structure</span><br><span class="line"></span><br><span class="line">def data_csv(doct):</span><br><span class="line">    with open(<span class="string">'data.csv'</span>,<span class="string">'a'</span>,newline=<span class="string">''</span>) as csvfile:</span><br><span class="line">        fieldnames = [<span class="string">"名称"</span>,<span class="string">"价格(万元)"</span>,<span class="string">"单价(元)"</span>,<span class="string">"室"</span>,<span class="string">"厅"</span>,<span class="string">"面积(平方米)"</span>,<span class="string">"方位"</span>,<span class="string">"装修"</span>,<span class="string">"楼层"</span>, <span class="string">"建成年"</span>,<span class="string">"房屋类型"</span>]</span><br><span class="line">        writer = csv.DictWriter(csvfile,fieldnames=fieldnames)</span><br><span class="line">        writer.writerow(doct)</span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#time_ = time.time()</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(2,MAX):</span><br><span class="line">        try:</span><br><span class="line">            html = index_page(i)</span><br><span class="line">            get_products(html)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"*********"</span>+str(i)+<span class="string">"页爬取完成"</span>+<span class="string">"********"</span>)</span><br><span class="line">        except:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"*********"</span>+str(i)+<span class="string">"页爬取失败"</span>+<span class="string">"********"</span>)</span><br><span class="line">    <span class="comment">#print(time.time()-time_)</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="给大家一个进阶版的（一个简单的多线程爬虫）"><a href="#给大家一个进阶版的（一个简单的多线程爬虫）" class="headerlink" title="给大家一个进阶版的（一个简单的多线程爬虫）"></a>给大家一个进阶版的（一个简单的多线程爬虫）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import requests</span><br><span class="line">import queue</span><br><span class="line">from lxml import  etree</span><br><span class="line">import parsel</span><br><span class="line">import csv</span><br><span class="line">import time</span><br><span class="line">MAX = 100</span><br><span class="line"></span><br><span class="line">def preparUrlQueue():</span><br><span class="line">    urlQueue = queue.Queue()</span><br><span class="line">    url = <span class="string">"https://cd.lianjia.com/ershoufang/pg&#123;&#125;/"</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(1,MAX):</span><br><span class="line">        url_ = url.format(i)</span><br><span class="line">        urlQueue.put(url_)</span><br><span class="line">    <span class="built_in">return</span> urlQueue</span><br><span class="line"></span><br><span class="line">class CrawlerThread(threading.Thread):</span><br><span class="line">    def __init__(self,name,urlQueue):</span><br><span class="line">        super().__init__(name=name)</span><br><span class="line">        self.urlQueue = urlQueue</span><br><span class="line">    <span class="comment">#         print("777")</span></span><br><span class="line">    def run(self):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> not self.urlQueue.empty():<span class="comment">#队列不为空</span></span><br><span class="line"></span><br><span class="line">            try:</span><br><span class="line">                url = self.urlQueue.get(block=False)<span class="comment">#当队列为空，不至于报错</span></span><br><span class="line"></span><br><span class="line">                headers = &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"</span></span><br><span class="line">                &#125;</span><br><span class="line">                response = requests.get(url=url,headers=headers)</span><br><span class="line">                <span class="comment">#                 print(url)</span></span><br><span class="line">                responseQueue.put(response)</span><br><span class="line">            except:</span><br><span class="line"></span><br><span class="line">                pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ParserThread(threading.Thread):</span><br><span class="line">    def __init__(self,name,responseQueue,lock):</span><br><span class="line">        super().__init__(name=name)</span><br><span class="line">        self.responseQueue = responseQueue</span><br><span class="line">        self.lock = lock</span><br><span class="line">    def run(self):</span><br><span class="line">        <span class="keyword">while</span>  not  parse_exit_falg:</span><br><span class="line">            try:</span><br><span class="line">                response = self.responseQueue.get()</span><br><span class="line">                self.parseResponse(response)</span><br><span class="line">            except:</span><br><span class="line">                pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def parseResponse(self,response):</span><br><span class="line">        <span class="comment"># print("qqqq")</span></span><br><span class="line">        sel = parsel.Selector(response.text)</span><br><span class="line">        dd = sel.css(<span class="string">'li.clear'</span>)</span><br><span class="line">        <span class="comment"># print(len(dd))</span></span><br><span class="line">        <span class="comment"># print("3333")</span></span><br><span class="line">        <span class="keyword">for</span> dd <span class="keyword">in</span> dd:</span><br><span class="line">            title = dd.css(<span class="string">'div.title a::text'</span>).getall()</span><br><span class="line">            k = dd.css(<span class="string">'div.totalPrice span::text'</span>).getall()</span><br><span class="line">            b = dd.css(<span class="string">'div.houseInfo::text'</span>).getall()</span><br><span class="line">            a = dd.css(<span class="string">'div.positionInfo a::text'</span>).getall()</span><br><span class="line">            d = dd.css(<span class="string">'div.unitPrice::attr(data-price)'</span>).getall()</span><br><span class="line">            c = dd.css(<span class="string">'div.positionInfo a::text'</span>).getall()</span><br><span class="line">            room, hall, area, orientation, decoration, floor ,setup, structure = self.houseInfo(b)</span><br><span class="line">            flag = setup.isdigit()</span><br><span class="line">            <span class="keyword">if</span> flag == False:</span><br><span class="line">                setup = -9999</span><br><span class="line">            doct = &#123;</span><br><span class="line">                <span class="string">'name'</span>:title[0],</span><br><span class="line">                <span class="string">'price'</span>:k[0],</span><br><span class="line">                <span class="string">'room'</span>:room,</span><br><span class="line">                <span class="string">'hall'</span>:hall,</span><br><span class="line">                <span class="string">'area'</span>:area,</span><br><span class="line">                <span class="string">'orientation'</span>:orientation,</span><br><span class="line">                <span class="string">'decoration'</span>:decoration,</span><br><span class="line">                <span class="string">'floor'</span>:floor,</span><br><span class="line">                <span class="string">'setop'</span>:setup,</span><br><span class="line">                <span class="string">"structure"</span>:structure,</span><br><span class="line">                <span class="string">"address"</span>:a[0],</span><br><span class="line">                <span class="string">'unit_price'</span>:d[0],</span><br><span class="line">                <span class="string">'location'</span>:c[1]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># self.lock.acquire()</span></span><br><span class="line">            self.save(doct)</span><br><span class="line">            <span class="comment"># print("完成爬取一页")</span></span><br><span class="line">            <span class="comment"># self.lock.release()</span></span><br><span class="line"></span><br><span class="line">    def save(self,doct):</span><br><span class="line">        with open(<span class="string">'data_1.csv'</span>,<span class="string">'a'</span>,newline=<span class="string">''</span>) as csvfile:</span><br><span class="line">            fieldnames = [<span class="string">'name'</span>,<span class="string">'price'</span>,<span class="string">'room'</span>,<span class="string">'hall'</span>,<span class="string">'area'</span>,<span class="string">'orientation'</span>,<span class="string">'decoration'</span>,<span class="string">'floor'</span>,<span class="string">'setop'</span>,<span class="string">'structure'</span>,<span class="string">'address'</span>,<span class="string">'unit_price'</span>]</span><br><span class="line">            writer = csv.DictWriter(csvfile,fieldnames=fieldnames)</span><br><span class="line">            writer.writerow(doct)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def houseInfo(self,Info):</span><br><span class="line">        bb =  Info[0].split(<span class="string">"|"</span>)</span><br><span class="line">        room = bb[0][0]</span><br><span class="line">        hall = bb[0][2]</span><br><span class="line">        area = bb[1][:-3]</span><br><span class="line">        orientation = bb[2]</span><br><span class="line">        decoration = bb[3]</span><br><span class="line">        floor = bb[4]</span><br><span class="line">        setup = bb[5][1:5]</span><br><span class="line">        structure = bb[-1]</span><br><span class="line">        <span class="built_in">return</span> room, hall, area, orientation, decoration, floor ,setup, structure</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">'__main__'</span>:</span><br><span class="line">    time_ = time.time()</span><br><span class="line">    lock = threading.Lock()</span><br><span class="line">    urlQueue = preparUrlQueue()</span><br><span class="line">    responseQueue = queue.Queue()</span><br><span class="line">    parse_exit_falg = False</span><br><span class="line">    crawlerThreads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(5):<span class="comment">#创建获取线程</span></span><br><span class="line">        thred = CrawlerThread(f<span class="string">'crawler-&#123;i&#125;'</span>,urlQueue=urlQueue)</span><br><span class="line"></span><br><span class="line">        crawlerThreads.append(thred)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> crawlerThreads:<span class="comment">#启动获取线程</span></span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    parserThreads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(5):<span class="comment">#创建解析线程</span></span><br><span class="line">        thred = ParserThread(f<span class="string">'crawler-&#123;i&#125;'</span>,responseQueue=responseQueue,lock=lock)</span><br><span class="line">        parserThreads.append(thred)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> parserThreads:<span class="comment">#启动解析线程</span></span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> not urlQueue.empty():</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> crawlerThreads:<span class="comment">#关闭获取线程</span></span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> not responseQueue.empty():</span><br><span class="line">        pass</span><br><span class="line">    parse_exit_falg = True</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> parserThreads:<span class="comment">#关闭解析线程</span></span><br><span class="line">        t.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"完成爬取"</span>)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
